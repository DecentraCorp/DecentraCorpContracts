{
  "contractName": "FinalizableCrowdsale",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "hasClosed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "weiRaised",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closingTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wallet",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "rate",
          "type": "uint256"
        },
        {
          "name": "wallet",
          "type": "address"
        },
        {
          "name": "token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "openingTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "openingTime",
          "type": "uint256"
        },
        {
          "name": "closingTime",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CrowdsaleFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "prevClosingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "newClosingTime",
          "type": "uint256"
        }
      ],
      "name": "TimedCrowdsaleExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "purchaser",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.7+commit.6da8b019\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"openingTime\",\"type\":\"uint256\"},{\"name\":\"closingTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prevClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"TimedCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Extension of TimedCrowdsale with a one-off finalization action, where one can do extra work after finishing.\",\"methods\":{\"buyTokens(address)\":{\"details\":\"low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.\",\"params\":{\"beneficiary\":\"Recipient of the token purchase\"}},\"closingTime()\":{\"return\":\"the crowdsale closing time.\"},\"finalize()\":{\"details\":\"Must be called after crowdsale ends, to do some extra finalization work. Calls the contract's finalization function.\"},\"finalized()\":{\"return\":\"true if the crowdsale is finalized, false otherwise.\"},\"hasClosed()\":{\"details\":\"Checks whether the period in which the crowdsale is open has already elapsed.\",\"return\":\"Whether crowdsale period has elapsed\"},\"initialize(uint256,address,address)\":{\"details\":\"The rate is the conversion between wei and the smallest and indivisible token unit. So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\",\"params\":{\"rate\":\"Number of token units a buyer gets per wei\",\"token\":\"Address of the token being sold\",\"wallet\":\"Address where collected funds will be forwarded to\"}},\"initialize(uint256,uint256)\":{\"details\":\"Constructor, takes crowdsale opening and closing times.\",\"params\":{\"closingTime\":\"Crowdsale closing time\",\"openingTime\":\"Crowdsale opening time\"}},\"isOpen()\":{\"return\":\"true if the crowdsale is open, false otherwise.\"},\"openingTime()\":{\"return\":\"the crowdsale opening time.\"},\"rate()\":{\"return\":\"the number of token units a buyer gets per wei.\"},\"token()\":{\"return\":\"the token being sold.\"},\"wallet()\":{\"return\":\"the address where funds are collected.\"},\"weiRaised()\":{\"return\":\"the amount of wei raised.\"}},\"title\":\"FinalizableCrowdsale\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/frangio/oz/eth-pkg-contracts/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\":\"FinalizableCrowdsale\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/frangio/oz/eth-pkg-contracts/contracts/GSN/Context.sol\":{\"keccak256\":\"0x0d4306da5305cb78f09c70c18ec86dbc66f22fa5ade90edc20e1ab88e16d4d10\",\"urls\":[\"bzzr://47885dccac32ee543284e93f21a5f62c499076b04d01b12ff67aefffbbdcbd34\"]},\"/home/frangio/oz/eth-pkg-contracts/contracts/crowdsale/Crowdsale.sol\":{\"keccak256\":\"0xb9b0790612bb9d772a14aaf98adf83dea1530df48ddb86f1a8d7f56c7c1195b5\",\"urls\":[\"bzzr://16b8283065687ce5799dfdb2c15ad425e6e5f329e1199113b9bd5b3bc1f93b47\"]},\"/home/frangio/oz/eth-pkg-contracts/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\":{\"keccak256\":\"0x5589ff14d245d6eed928c9e4b85650b04370d82c627d955e70204e492381557f\",\"urls\":[\"bzzr://d2b75ce8c16a4542e398739c132579331d1694f3a1425b81487aa49a740f9885\"]},\"/home/frangio/oz/eth-pkg-contracts/contracts/crowdsale/validation/TimedCrowdsale.sol\":{\"keccak256\":\"0xf9e9992b2742a665b14e8c86520ed00b539e7d7dfb8c632f940a6d2ab33ae539\",\"urls\":[\"bzzr://7818e1d4baa3998e624e0b8879db77ce29b5ec4896bb25854d65437623139e7b\"]},\"/home/frangio/oz/eth-pkg-contracts/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xc2a200a877c4a9b2475c246c54ffecc69ffde3e11af83319c63c2dc5458bac80\",\"urls\":[\"bzzr://c8876e2c39b60f155d748d71d715c8f3903fae5a405ac599adcb6ad2f9a583f9\"]},\"/home/frangio/oz/eth-pkg-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x59e7df16169a498cb8837963b2f5461d88e63bd1eb6c7d58b814d76b84ccbe61\",\"urls\":[\"bzzr://e572c9c4e02e37349702451bf3b5dcbbc86a19da5a51695b5b3e1bfe1e7825dc\"]},\"/home/frangio/oz/eth-pkg-contracts/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0x7230c14d692aff375e4931d60ef73ac8a79c28b9e54c200a377b7dc613c81a78\",\"urls\":[\"bzzr://3538d7da02640c67ac909e84d90e799439f3b3195cf0de39fd173dacd5a98311\"]},\"/home/frangio/oz/eth-pkg-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xea16b9933153c647242ba50b3e494fb133063d49f1fa81823f35a8c28754142e\",\"urls\":[\"bzzr://aa2b2eb534149525e194341c01cadf666668a1b7d679a268d10e23570a7e26b1\"]},\"/home/frangio/oz/eth-pkg-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xfdf6aa17d66c3fb80fd92feedeb07c5b9fb1ae283d606c56ba51e0bbd5a3bc1a\",\"urls\":[\"bzzr://65f06b03fa1c09da0b54c2269dbe3436fae31931c1bd815f799ff2a405abcac7\"]},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"keccak256\":\"0xf79d9851c085aa8412e87d7a26d3485488fe12538ecb4e317ce41fc1f2c3a16a\",\"urls\":[\"bzzr://e45c5a995f57637b2300a376647ee345cc9cb30ee1984735091fcd4b10ff3500\"]}},\"version\":1}",
  "bytecode": "0x6080604052610f80806100136000396000f3fe6080604052600436106100dd5760003560e01c80638129fc1c1161007f578063b7a8807c11610059578063b7a8807c146102fd578063e4a3011614610328578063ec8ac4d81461036d578063fc0c546a146103b1576100dd565b80638129fc1c1461023c578063b3f05b9714610253578063b4988fd014610282576100dd565b806347535d7b116100bb57806347535d7b146101745780634b6753bc146101a35780634bb278f3146101ce578063521eb273146101e5576100dd565b80631515bc2b146100ef5780632c4e722e1461011e5780634042b66f14610149575b6100ed6100e8610408565b610410565b005b3480156100fb57600080fd5b5061010461050d565b604051808215151515815260200191505060405180910390f35b34801561012a57600080fd5b50610133610519565b6040518082815260200191505060405180910390f35b34801561015557600080fd5b5061015e610523565b6040518082815260200191505060405180910390f35b34801561018057600080fd5b5061018961052d565b604051808215151515815260200191505060405180910390f35b3480156101af57600080fd5b506101b8610548565b6040518082815260200191505060405180910390f35b3480156101da57600080fd5b506101e3610552565b005b3480156101f157600080fd5b506101fa6105ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024857600080fd5b506102516105f8565b005b34801561025f57600080fd5b506102686106ff565b604051808215151515815260200191505060405180910390f35b34801561028e57600080fd5b506102fb600480360360608110156102a557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610716565b005b34801561030957600080fd5b50610312610922565b6040518082815260200191505060405180910390f35b34801561033457600080fd5b5061036b6004803603604081101561034b57600080fd5b81019080803590602001909291908035906020019092919050505061092c565b005b6103af6004803603602081101561038357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610410565b005b3480156103bd57600080fd5b506103c6610a62565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600033905090565b60016033600082825401925050819055506000603354905060003490506104378382610a8c565b600061044282610aab565b905061045982606954610ac990919063ffffffff16565b6069819055506104698482610ae8565b8373ffffffffffffffffffffffffffffffffffffffff16610488610408565b73ffffffffffffffffffffffffffffffffffffffff167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b8484604051808381526020018281526020019250505060405180910390a36104e78483610af6565b6104ef610afa565b6104f98483610b65565b5050603354811461050957600080fd5b5050565b6000609d544211905090565b6000606854905090565b6000606954905090565b6000609c5442101580156105435750609d544211155b905090565b6000609d54905090565b60d060009054906101000a900460ff161561056c57600080fd5b61057461050d565b61057d57600080fd5b600160d060006101000a81548160ff0219169083151502179055506105a0610b69565b7f9270cc390c096600a1c17c44345a1ba689fafd99d97487b10cfccf86cf73183660405160405180910390a1565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff16806106175750610616610b6b565b5b8061062e57506000809054906101000a900460ff16155b610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f27602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156106d3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600160338190555080156106fc5760008060016101000a81548160ff0219169083151502179055505b50565b600060d060009054906101000a900460ff16905090565b600060019054906101000a900460ff16806107355750610734610b6b565b5b8061074c57506000809054906101000a900460ff16155b6107a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f27602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156107f1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600084116107fe57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561083857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561087257600080fd5b8360688190555082606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550801561091c5760008060016101000a81548160ff0219169083151502179055505b50505050565b6000609c54905090565b600060019054906101000a900460ff168061094b575061094a610b6b565b5b8061096257506000809054906101000a900460ff16155b6109b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f27602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015610a07576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610a0f610b7c565b610a1557fe5b42831015610a2257600080fd5b828211610a2e57600080fd5b82609c8190555081609d819055508015610a5d5760008060016101000a81548160ff0219169083151502179055505b505050565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a9461052d565b610a9d57600080fd5b610aa78282610c3e565b5050565b6000610ac260685483610c8a90919063ffffffff16565b9050919050565b600080828401905083811015610ade57600080fd5b8091505092915050565b610af28282610cc4565b5050565b5050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610b62573d6000803e3d6000fd5b50565b5050565b565b600080303b90506000811491505090565b600080606854118015610bde5750600073ffffffffffffffffffffffffffffffffffffffff16606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b8015610c395750600073ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c7857600080fd5b6000811415610c8657600080fd5b5050565b600080831415610c9d5760009050610cbe565b6000828402905082848281610cae57fe5b0414610cb957600080fd5b809150505b92915050565b610d118282606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d159092919063ffffffff16565b5050565b610de1838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610de6565b505050565b610e058273ffffffffffffffffffffffffffffffffffffffff16610f13565b610e0e57600080fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b60208310610e5d5780518252602082019150602081019050602083039250610e3a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610ebf576040519150601f19603f3d011682016040523d82523d6000602084013e610ec4565b606091505b509150915081610ed357600080fd5b600081511115610f0d57808060200190516020811015610ef257600080fd5b8101908080519060200190929190505050610f0c57600080fd5b5b50505050565b600080823b90506000811191505091905056fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a165627a7a723058200538b265d1c7cd850516b559c2217d4102187fde07549c2fbaaed7cb4a0a9a850029",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80638129fc1c1161007f578063b7a8807c11610059578063b7a8807c146102fd578063e4a3011614610328578063ec8ac4d81461036d578063fc0c546a146103b1576100dd565b80638129fc1c1461023c578063b3f05b9714610253578063b4988fd014610282576100dd565b806347535d7b116100bb57806347535d7b146101745780634b6753bc146101a35780634bb278f3146101ce578063521eb273146101e5576100dd565b80631515bc2b146100ef5780632c4e722e1461011e5780634042b66f14610149575b6100ed6100e8610408565b610410565b005b3480156100fb57600080fd5b5061010461050d565b604051808215151515815260200191505060405180910390f35b34801561012a57600080fd5b50610133610519565b6040518082815260200191505060405180910390f35b34801561015557600080fd5b5061015e610523565b6040518082815260200191505060405180910390f35b34801561018057600080fd5b5061018961052d565b604051808215151515815260200191505060405180910390f35b3480156101af57600080fd5b506101b8610548565b6040518082815260200191505060405180910390f35b3480156101da57600080fd5b506101e3610552565b005b3480156101f157600080fd5b506101fa6105ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024857600080fd5b506102516105f8565b005b34801561025f57600080fd5b506102686106ff565b604051808215151515815260200191505060405180910390f35b34801561028e57600080fd5b506102fb600480360360608110156102a557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610716565b005b34801561030957600080fd5b50610312610922565b6040518082815260200191505060405180910390f35b34801561033457600080fd5b5061036b6004803603604081101561034b57600080fd5b81019080803590602001909291908035906020019092919050505061092c565b005b6103af6004803603602081101561038357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610410565b005b3480156103bd57600080fd5b506103c6610a62565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600033905090565b60016033600082825401925050819055506000603354905060003490506104378382610a8c565b600061044282610aab565b905061045982606954610ac990919063ffffffff16565b6069819055506104698482610ae8565b8373ffffffffffffffffffffffffffffffffffffffff16610488610408565b73ffffffffffffffffffffffffffffffffffffffff167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b8484604051808381526020018281526020019250505060405180910390a36104e78483610af6565b6104ef610afa565b6104f98483610b65565b5050603354811461050957600080fd5b5050565b6000609d544211905090565b6000606854905090565b6000606954905090565b6000609c5442101580156105435750609d544211155b905090565b6000609d54905090565b60d060009054906101000a900460ff161561056c57600080fd5b61057461050d565b61057d57600080fd5b600160d060006101000a81548160ff0219169083151502179055506105a0610b69565b7f9270cc390c096600a1c17c44345a1ba689fafd99d97487b10cfccf86cf73183660405160405180910390a1565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff16806106175750610616610b6b565b5b8061062e57506000809054906101000a900460ff16155b610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f27602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156106d3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600160338190555080156106fc5760008060016101000a81548160ff0219169083151502179055505b50565b600060d060009054906101000a900460ff16905090565b600060019054906101000a900460ff16806107355750610734610b6b565b5b8061074c57506000809054906101000a900460ff16155b6107a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f27602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156107f1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600084116107fe57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561083857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561087257600080fd5b8360688190555082606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550801561091c5760008060016101000a81548160ff0219169083151502179055505b50505050565b6000609c54905090565b600060019054906101000a900460ff168061094b575061094a610b6b565b5b8061096257506000809054906101000a900460ff16155b6109b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f27602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015610a07576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610a0f610b7c565b610a1557fe5b42831015610a2257600080fd5b828211610a2e57600080fd5b82609c8190555081609d819055508015610a5d5760008060016101000a81548160ff0219169083151502179055505b505050565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a9461052d565b610a9d57600080fd5b610aa78282610c3e565b5050565b6000610ac260685483610c8a90919063ffffffff16565b9050919050565b600080828401905083811015610ade57600080fd5b8091505092915050565b610af28282610cc4565b5050565b5050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610b62573d6000803e3d6000fd5b50565b5050565b565b600080303b90506000811491505090565b600080606854118015610bde5750600073ffffffffffffffffffffffffffffffffffffffff16606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b8015610c395750600073ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c7857600080fd5b6000811415610c8657600080fd5b5050565b600080831415610c9d5760009050610cbe565b6000828402905082848281610cae57fe5b0414610cb957600080fd5b809150505b92915050565b610d118282606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d159092919063ffffffff16565b5050565b610de1838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610de6565b505050565b610e058273ffffffffffffffffffffffffffffffffffffffff16610f13565b610e0e57600080fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b60208310610e5d5780518252602082019150602081019050602083039250610e3a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610ebf576040519150601f19603f3d011682016040523d82523d6000602084013e610ec4565b606091505b509150915081610ed357600080fd5b600081511115610f0d57808060200190516020811015610ef257600080fd5b8101908080519060200190929190505050610f0c57600080fd5b5b50505050565b600080823b90506000811191505091905056fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a165627a7a723058200538b265d1c7cd850516b559c2217d4102187fde07549c2fbaaed7cb4a0a9a850029",
  "sourceMap": "323:1017:16:-;;;;;;;;;",
  "deployedSourceMap": "323:1017:16:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3008:23:15;3018:12;:10;:12::i;:::-;3008:9;:23::i;:::-;323:1017:16;2067:156:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2067:156:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3421:75:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3421:75:15;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3559:85;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3559:85:15;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1714:189:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1714:189:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1540:89;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1540:89:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;812:183:16;;8:9:-1;5:2;;;30:1;27;20:12;5:2;812:183:16;;;:::i;:::-;;3249:87:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3249:87:15;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;466:214:77;;8:9:-1;5:2;;;30:1;27;20:12;5:2;466:214:77;;;:::i;:::-;;572:82:16;;8:9:-1;5:2;;;30:1;27;20:12;5:2;572:82:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2396:284:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2396:284:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2396:284:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1386:89:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1386:89:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;963:358;;8:9:-1;5:2;;;30:1;27;20:12;5:2;963:358:26;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;963:358:26;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3901:605:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3901:605:15;;;;;;;;;;;;;;;;;;;:::i;:::-;;3097:76;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3097:76:15;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;791:88:0;836:7;862:10;855:17;;791:88;:::o;3901:605:15:-;1106:1:77;1089:13;;:18;;;;;;;;;;;1117:20;1140:13;;1117:36;;3979:17:15;3999:9;3979:29;;4018:44;4039:11;4052:9;4018:20;:44::i;:::-;4121:14;4138:26;4154:9;4138:15;:26::i;:::-;4121:43;;4212:25;4227:9;4212:10;;:14;;:25;;;;:::i;:::-;4199:10;:38;;;;4248:37;4265:11;4278:6;4248:16;:37::i;:::-;4330:11;4300:61;;4316:12;:10;:12::i;:::-;4300:61;;;4343:9;4354:6;4300:61;;;;;;;;;;;;;;;;;;;;;;;;4372:46;4395:11;4408:9;4372:22;:46::i;:::-;4429:15;:13;:15::i;:::-;4454:45;4476:11;4489:9;4454:21;:45::i;:::-;1163:1:77;;1198:13;;1182:12;:29;1174:38;;;;;;3901:605:15;;:::o;2067:156:26:-;2109:4;2204:12;;2186:15;:30;2179:37;;2067:156;:::o;3421:75:15:-;3458:7;3484:5;;3477:12;;3421:75;:::o;3559:85::-;3601:7;3627:10;;3620:17;;3559:85;:::o;1714:189:26:-;1753:4;1849:12;;1830:15;:31;;:66;;;;;1884:12;;1865:15;:31;;1830:66;1823:73;;1714:189;:::o;1540:89::-;1584:7;1610:12;;1603:19;;1540:89;:::o;812:183:16:-;858:10;;;;;;;;;;;857:11;849:20;;;;;;887:11;:9;:11::i;:::-;879:20;;;;;;923:4;910:10;;:17;;;;;;;;;;;;;;;;;;938:15;:13;:15::i;:::-;968:20;;;;;;;;;;812:183::o;3249:87:15:-;3288:15;3322:7;;;;;;;;;;;3315:14;;3249:87;:::o;466:214:77:-;1024:12:78;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;;;;;;1151:13;1129:35;;1174:14;1170:80;;;1213:4;1198:12;;:19;;;;;;;;;;;;;;;;;;1239:4;1225:11;;:18;;;;;;;;;;;;;;;;;;1170:80;672:1:77;656:13;:17;;;;1268:14:78;1264:55;;;1307:5;1292:12;;:20;;;;;;;;;;;;;;;;;;1264:55;466:214:77;:::o;572:82:16:-;614:4;637:10;;;;;;;;;;;630:17;;572:82;:::o;2396:284:15:-;1024:12:78;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;;;;;;1151:13;1129:35;;1174:14;1170:80;;;1213:4;1198:12;;:19;;;;;;;;;;;;;;;;;;1239:4;1225:11;;:18;;;;;;;;;;;;;;;;;;1170:80;2512:1:15;2505:4;:8;2497:17;;;;;;2550:1;2532:20;;:6;:20;;;;2524:29;;;;;;2597:1;2571:28;;2579:5;2571:28;;;;2563:37;;;;;;2619:4;2611:5;:12;;;;2643:6;2633:7;;:16;;;;;;;;;;;;;;;;;;2668:5;2659:6;;:14;;;;;;;;;;;;;;;;;;1268::78;1264:55;;;1307:5;1292:12;;:20;;;;;;;;;;;;;;;;;;1264:55;2396:284:15;;;;:::o;1386:89:26:-;1430:7;1456:12;;1449:19;;1386:89;:::o;963:358::-;1024:12:78;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;;;;;;1151:13;1129:35;;1174:14;1170:80;;;1213:4;1198:12;;:19;;;;;;;;;;;;;;;;;;1239:4;1225:11;;:18;;;;;;;;;;;;;;;;;;1170:80;1061:31:26;:29;:31::i;:::-;1054:39;;;;1181:15;1166:11;:30;;1158:39;;;;;;1229:11;1215;:25;1207:34;;;;;;1267:11;1252:12;:26;;;;1303:11;1288:12;:26;;;;1268:14:78;1264:55;;;1307:5;1292:12;;:20;;;;;;;;;;;;;;;;;;1264:55;963:358:26;;;:::o;3097:76:15:-;3135:6;3160;;;;;;;;;;;3153:13;;3097:76;:::o;2547:165:26:-;748:8;:6;:8::i;:::-;740:17;;;;;;2655:50;2682:11;2695:9;2655:26;:50::i;:::-;2547:165;;:::o;7306:120:15:-;7373:7;7399:20;7413:5;;7399:9;:13;;:20;;;;:::i;:::-;7392:27;;7306:120;;;:::o;1439:145:42:-;1497:7;1516:9;1532:1;1528;:5;1516:17;;1556:1;1551;:6;;1543:15;;;;;;1576:1;1569:8;;;1439:145;;;;:::o;6508:134:15:-;6595:40;6610:11;6623;6595:14;:40::i;:::-;6508:134;;:::o;6912:145::-;;;:::o;7513:78::-;7557:7;;;;;;;;;;;:16;;:27;7574:9;7557:27;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7557:27:15;7513:78::o;5676:149::-;;;:::o;1204:98:16:-;:::o;1409:467:78:-;1456:4;1797:10;1842:7;1830:20;1824:26;;1870:1;1864:2;:7;1857:14;;;1409:467;:::o;4512:159:15:-;4566:4;4599:1;4591:5;;:9;4590:38;;;;;4625:1;4606:21;;:7;;;;;;;;;;;:21;;;;4590:38;:73;;;;;4660:1;4633:29;;4641:6;;;;;;;;;;;4633:29;;;;4590:73;4582:82;;4512:159;:::o;5213:168::-;5338:1;5315:25;;:11;:25;;;;5307:34;;;;;;5372:1;5359:9;:14;;5351:23;;;;;;5213:168;;:::o;231:421:42:-;289:7;534:1;529;:6;525:45;;;558:1;551:8;;;;525:45;580:9;596:1;592;:5;580:17;;624:1;619;615;:5;;;;;;:10;607:19;;;;;;644:1;637:8;;;231:421;;;;;:::o;6105:137:15:-;6190:45;6210:11;6223;6190:6;;;;;;;;;;;:19;;;;:45;;;;;:::i;:::-;6105:137;;:::o;662:174:57:-;744:85;763:5;793;:14;;;:23;;;;818:2;822:5;770:58;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;770:58:57;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;770:58:57;744:18;:85::i;:::-;662:174;;;:::o;2487:869::-;3030:27;3038:5;3030:25;;;:27::i;:::-;3022:36;;;;;;3129:12;3143:23;3178:5;3170:19;;3190:4;3170:25;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3170:25:57;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3128:67:57;;;;3213:7;3205:16;;;;;;3256:1;3236:10;:17;:21;3232:118;;;3319:10;3308:30;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3308:30:57;;;;;;;;;;;;;;;;3300:39;;;;;;3232:118;2487:869;;;;:::o;463:616:75:-;523:4;539:12;1038:7;1026:20;1018:28;;1071:1;1064:4;:8;1057:15;;;463:616;;;:::o",
  "source": "pragma solidity ^0.5.2;\n\nimport \"@openzeppelin/upgrades/contracts/Initializable.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../validation/TimedCrowdsale.sol\";\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of TimedCrowdsale with a one-off finalization action, where one\n * can do extra work after finishing.\n */\ncontract FinalizableCrowdsale is Initializable, TimedCrowdsale {\n    using SafeMath for uint256;\n\n    bool private _finalized;\n\n    event CrowdsaleFinalized();\n\n    /**\n     * @return true if the crowdsale is finalized, false otherwise.\n     */\n    function finalized() public view returns (bool) {\n        return _finalized;\n    }\n\n    /**\n     * @dev Must be called after crowdsale ends, to do some extra finalization\n     * work. Calls the contract's finalization function.\n     */\n    function finalize() public {\n        require(!_finalized);\n        require(hasClosed());\n\n        _finalized = true;\n\n        _finalization();\n        emit CrowdsaleFinalized();\n    }\n\n    /**\n     * @dev Can be overridden to add finalization logic. The overriding function\n     * should call super._finalization() to ensure the chain of finalization is\n     * executed entirely.\n     */\n    function _finalization() internal {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    uint256[50] private ______gap;\n}\n",
  "sourcePath": "/home/frangio/oz/eth-pkg-contracts/contracts/crowdsale/distribution/FinalizableCrowdsale.sol",
  "ast": {
    "absolutePath": "/home/frangio/oz/eth-pkg-contracts/contracts/crowdsale/distribution/FinalizableCrowdsale.sol",
    "exportedSymbols": {
      "FinalizableCrowdsale": [
        2423
      ]
    },
    "id": 2424,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2368,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:16"
      },
      {
        "absolutePath": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "file": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "id": 2369,
        "nodeType": "ImportDirective",
        "scope": 2424,
        "sourceUnit": 9742,
        "src": "25:60:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/oz/eth-pkg-contracts/contracts/math/SafeMath.sol",
        "file": "../../math/SafeMath.sol",
        "id": 2370,
        "nodeType": "ImportDirective",
        "scope": 2424,
        "sourceUnit": 5568,
        "src": "86:33:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/oz/eth-pkg-contracts/contracts/crowdsale/validation/TimedCrowdsale.sol",
        "file": "../validation/TimedCrowdsale.sol",
        "id": 2371,
        "nodeType": "ImportDirective",
        "scope": 2424,
        "sourceUnit": 3449,
        "src": "120:42:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2372,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 9741,
              "src": "356:13:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$9741",
                "typeString": "contract Initializable"
              }
            },
            "id": 2373,
            "nodeType": "InheritanceSpecifier",
            "src": "356:13:16"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2374,
              "name": "TimedCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3448,
              "src": "371:14:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TimedCrowdsale_$3448",
                "typeString": "contract TimedCrowdsale"
              }
            },
            "id": 2375,
            "nodeType": "InheritanceSpecifier",
            "src": "371:14:16"
          }
        ],
        "contractDependencies": [
          26,
          2366,
          3448,
          9678,
          9741
        ],
        "contractKind": "contract",
        "documentation": "@title FinalizableCrowdsale\n@dev Extension of TimedCrowdsale with a one-off finalization action, where one\ncan do extra work after finishing.",
        "fullyImplemented": true,
        "id": 2423,
        "linearizedBaseContracts": [
          2423,
          3448,
          2366,
          9678,
          26,
          9741
        ],
        "name": "FinalizableCrowdsale",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 2378,
            "libraryName": {
              "contractScope": null,
              "id": 2376,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 5567,
              "src": "398:8:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$5567",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "392:27:16",
            "typeName": {
              "id": 2377,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "411:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "id": 2380,
            "name": "_finalized",
            "nodeType": "VariableDeclaration",
            "scope": 2423,
            "src": "425:23:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 2379,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "425:4:16",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 2382,
            "name": "CrowdsaleFinalized",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 2381,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "479:2:16"
            },
            "src": "455:27:16"
          },
          {
            "body": {
              "id": 2389,
              "nodeType": "Block",
              "src": "620:34:16",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2387,
                    "name": "_finalized",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2380,
                    "src": "637:10:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2386,
                  "id": 2388,
                  "nodeType": "Return",
                  "src": "630:17:16"
                }
              ]
            },
            "documentation": "@return true if the crowdsale is finalized, false otherwise.",
            "id": 2390,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finalized",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2383,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "590:2:16"
            },
            "returnParameters": {
              "id": 2386,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2385,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2390,
                  "src": "614:4:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2384,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "614:4:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "613:6:16"
            },
            "scope": 2423,
            "src": "572:82:16",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2413,
              "nodeType": "Block",
              "src": "839:156:16",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 2395,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "857:11:16",
                        "subExpression": {
                          "argumentTypes": null,
                          "id": 2394,
                          "name": "_finalized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2380,
                          "src": "858:10:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 2393,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        9759,
                        9760
                      ],
                      "referencedDeclaration": 9759,
                      "src": "849:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 2396,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "849:20:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2397,
                  "nodeType": "ExpressionStatement",
                  "src": "849:20:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 2399,
                          "name": "hasClosed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3382,
                          "src": "887:9:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 2400,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "887:11:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 2398,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        9759,
                        9760
                      ],
                      "referencedDeclaration": 9759,
                      "src": "879:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 2401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "879:20:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2402,
                  "nodeType": "ExpressionStatement",
                  "src": "879:20:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2405,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2403,
                      "name": "_finalized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2380,
                      "src": "910:10:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 2404,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "923:4:16",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "910:17:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2406,
                  "nodeType": "ExpressionStatement",
                  "src": "910:17:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 2407,
                      "name": "_finalization",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2418,
                      "src": "938:13:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 2408,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "938:15:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2409,
                  "nodeType": "ExpressionStatement",
                  "src": "938:15:16"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 2410,
                      "name": "CrowdsaleFinalized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2382,
                      "src": "968:18:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 2411,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "968:20:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2412,
                  "nodeType": "EmitStatement",
                  "src": "963:25:16"
                }
              ]
            },
            "documentation": "@dev Must be called after crowdsale ends, to do some extra finalization\nwork. Calls the contract's finalization function.",
            "id": 2414,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finalize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2391,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "829:2:16"
            },
            "returnParameters": {
              "id": 2392,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "839:0:16"
            },
            "scope": 2423,
            "src": "812:183:16",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2417,
              "nodeType": "Block",
              "src": "1238:64:16",
              "statements": []
            },
            "documentation": "@dev Can be overridden to add finalization logic. The overriding function\nshould call super._finalization() to ensure the chain of finalization is\nexecuted entirely.",
            "id": 2418,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_finalization",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2415,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1226:2:16"
            },
            "returnParameters": {
              "id": 2416,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1238:0:16"
            },
            "scope": 2423,
            "src": "1204:98:16",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 2422,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 2423,
            "src": "1308:29:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 2419,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1308:7:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 2421,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 2420,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1316:2:16",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1308:11:16",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 2424,
        "src": "323:1017:16"
      }
    ],
    "src": "0:1341:16"
  },
  "legacyAST": {
    "absolutePath": "/home/frangio/oz/eth-pkg-contracts/contracts/crowdsale/distribution/FinalizableCrowdsale.sol",
    "exportedSymbols": {
      "FinalizableCrowdsale": [
        2423
      ]
    },
    "id": 2424,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2368,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:16"
      },
      {
        "absolutePath": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "file": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "id": 2369,
        "nodeType": "ImportDirective",
        "scope": 2424,
        "sourceUnit": 9742,
        "src": "25:60:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/oz/eth-pkg-contracts/contracts/math/SafeMath.sol",
        "file": "../../math/SafeMath.sol",
        "id": 2370,
        "nodeType": "ImportDirective",
        "scope": 2424,
        "sourceUnit": 5568,
        "src": "86:33:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/oz/eth-pkg-contracts/contracts/crowdsale/validation/TimedCrowdsale.sol",
        "file": "../validation/TimedCrowdsale.sol",
        "id": 2371,
        "nodeType": "ImportDirective",
        "scope": 2424,
        "sourceUnit": 3449,
        "src": "120:42:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2372,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 9741,
              "src": "356:13:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$9741",
                "typeString": "contract Initializable"
              }
            },
            "id": 2373,
            "nodeType": "InheritanceSpecifier",
            "src": "356:13:16"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2374,
              "name": "TimedCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3448,
              "src": "371:14:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TimedCrowdsale_$3448",
                "typeString": "contract TimedCrowdsale"
              }
            },
            "id": 2375,
            "nodeType": "InheritanceSpecifier",
            "src": "371:14:16"
          }
        ],
        "contractDependencies": [
          26,
          2366,
          3448,
          9678,
          9741
        ],
        "contractKind": "contract",
        "documentation": "@title FinalizableCrowdsale\n@dev Extension of TimedCrowdsale with a one-off finalization action, where one\ncan do extra work after finishing.",
        "fullyImplemented": true,
        "id": 2423,
        "linearizedBaseContracts": [
          2423,
          3448,
          2366,
          9678,
          26,
          9741
        ],
        "name": "FinalizableCrowdsale",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 2378,
            "libraryName": {
              "contractScope": null,
              "id": 2376,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 5567,
              "src": "398:8:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$5567",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "392:27:16",
            "typeName": {
              "id": 2377,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "411:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "id": 2380,
            "name": "_finalized",
            "nodeType": "VariableDeclaration",
            "scope": 2423,
            "src": "425:23:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 2379,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "425:4:16",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 2382,
            "name": "CrowdsaleFinalized",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 2381,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "479:2:16"
            },
            "src": "455:27:16"
          },
          {
            "body": {
              "id": 2389,
              "nodeType": "Block",
              "src": "620:34:16",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2387,
                    "name": "_finalized",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2380,
                    "src": "637:10:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2386,
                  "id": 2388,
                  "nodeType": "Return",
                  "src": "630:17:16"
                }
              ]
            },
            "documentation": "@return true if the crowdsale is finalized, false otherwise.",
            "id": 2390,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finalized",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2383,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "590:2:16"
            },
            "returnParameters": {
              "id": 2386,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2385,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2390,
                  "src": "614:4:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2384,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "614:4:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "613:6:16"
            },
            "scope": 2423,
            "src": "572:82:16",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2413,
              "nodeType": "Block",
              "src": "839:156:16",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 2395,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "857:11:16",
                        "subExpression": {
                          "argumentTypes": null,
                          "id": 2394,
                          "name": "_finalized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2380,
                          "src": "858:10:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 2393,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        9759,
                        9760
                      ],
                      "referencedDeclaration": 9759,
                      "src": "849:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 2396,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "849:20:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2397,
                  "nodeType": "ExpressionStatement",
                  "src": "849:20:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 2399,
                          "name": "hasClosed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3382,
                          "src": "887:9:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 2400,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "887:11:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 2398,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        9759,
                        9760
                      ],
                      "referencedDeclaration": 9759,
                      "src": "879:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 2401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "879:20:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2402,
                  "nodeType": "ExpressionStatement",
                  "src": "879:20:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2405,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2403,
                      "name": "_finalized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2380,
                      "src": "910:10:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 2404,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "923:4:16",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "910:17:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2406,
                  "nodeType": "ExpressionStatement",
                  "src": "910:17:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 2407,
                      "name": "_finalization",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2418,
                      "src": "938:13:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 2408,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "938:15:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2409,
                  "nodeType": "ExpressionStatement",
                  "src": "938:15:16"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 2410,
                      "name": "CrowdsaleFinalized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2382,
                      "src": "968:18:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 2411,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "968:20:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2412,
                  "nodeType": "EmitStatement",
                  "src": "963:25:16"
                }
              ]
            },
            "documentation": "@dev Must be called after crowdsale ends, to do some extra finalization\nwork. Calls the contract's finalization function.",
            "id": 2414,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finalize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2391,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "829:2:16"
            },
            "returnParameters": {
              "id": 2392,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "839:0:16"
            },
            "scope": 2423,
            "src": "812:183:16",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2417,
              "nodeType": "Block",
              "src": "1238:64:16",
              "statements": []
            },
            "documentation": "@dev Can be overridden to add finalization logic. The overriding function\nshould call super._finalization() to ensure the chain of finalization is\nexecuted entirely.",
            "id": 2418,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_finalization",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2415,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1226:2:16"
            },
            "returnParameters": {
              "id": 2416,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1238:0:16"
            },
            "scope": 2423,
            "src": "1204:98:16",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 2422,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 2423,
            "src": "1308:29:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 2419,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1308:7:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 2421,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 2420,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1316:2:16",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1308:11:16",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 2424,
        "src": "323:1017:16"
      }
    ],
    "src": "0:1341:16"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.7+commit.6da8b019.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.9",
  "updatedAt": "2019-08-15T15:08:57.168Z",
  "devdoc": {
    "details": "Extension of TimedCrowdsale with a one-off finalization action, where one can do extra work after finishing.",
    "methods": {
      "buyTokens(address)": {
        "details": "low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.",
        "params": {
          "beneficiary": "Recipient of the token purchase"
        }
      },
      "closingTime()": {
        "return": "the crowdsale closing time."
      },
      "finalize()": {
        "details": "Must be called after crowdsale ends, to do some extra finalization work. Calls the contract's finalization function."
      },
      "finalized()": {
        "return": "true if the crowdsale is finalized, false otherwise."
      },
      "hasClosed()": {
        "details": "Checks whether the period in which the crowdsale is open has already elapsed.",
        "return": "Whether crowdsale period has elapsed"
      },
      "initialize(uint256,address,address)": {
        "details": "The rate is the conversion between wei and the smallest and indivisible token unit. So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.",
        "params": {
          "rate": "Number of token units a buyer gets per wei",
          "token": "Address of the token being sold",
          "wallet": "Address where collected funds will be forwarded to"
        }
      },
      "initialize(uint256,uint256)": {
        "details": "Constructor, takes crowdsale opening and closing times.",
        "params": {
          "closingTime": "Crowdsale closing time",
          "openingTime": "Crowdsale opening time"
        }
      },
      "isOpen()": {
        "return": "true if the crowdsale is open, false otherwise."
      },
      "openingTime()": {
        "return": "the crowdsale opening time."
      },
      "rate()": {
        "return": "the number of token units a buyer gets per wei."
      },
      "token()": {
        "return": "the token being sold."
      },
      "wallet()": {
        "return": "the address where funds are collected."
      },
      "weiRaised()": {
        "return": "the amount of wei raised."
      }
    },
    "title": "FinalizableCrowdsale"
  },
  "userdoc": {
    "methods": {}
  }
}